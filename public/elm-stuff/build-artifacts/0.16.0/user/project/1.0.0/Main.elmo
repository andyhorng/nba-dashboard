Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Date$Format = Elm.Date.Format.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $SocketIO = Elm.SocketIO.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var log = function (r) {    var _p0 = r;if (_p0.ctor === "Ok") {    return r;} else {    return A2($Debug.log,_p0._0,r);}};
   var rawBets = $Signal.mailbox("null");
   var socket = A2($SocketIO.io,"",$SocketIO.defaultOptions);
   var responses = Elm.Native.Task.make(_elm).perform(A2($Task.andThen,socket,A2($SocketIO.on,"update",rawBets.address)));
   var apply = $Json$Decode.object2(F2(function (x,y) {    return x(y);}));
   var constructing = $Json$Decode.succeed;
   var Update = function (a) {    return {ctor: "Update",_0: a};};
   var NoOp = {ctor: "NoOp"};
   var actions = $Signal.mailbox(NoOp);
   var historyView = F2(function (current,history) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("tooltip-item")]),
      _U.list([$Html.text(current)
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("tooltip")]),
              _U.list([A2($Html.p,
              _U.list([]),
              _U.list([A2($Html.ul,
              _U.list([]),
              A2($List.map,
              function (_p1) {
                 var _p2 = _p1;
                 return A2($Html.li,
                 _U.list([]),
                 _U.list([A2($Html.span,_U.list([]),_U.list([$Html.text(_p2._0)]))
                         ,A2($Html.span,_U.list([$Html$Attributes.$class("num")]),_U.list([$Html.text(_p2._1)]))]));
              },
              history))]))]))]));
   });
   var translateTeamName = function (raw) {
      var last = function (array) {    return A2($Array.get,$Array.length(array) - 1,array);};
      var key = last($Array.fromList(A2($String.split," ",$String.toLower(raw))));
      var _p3 = key;
      if (_p3.ctor === "Nothing") {
            return "Unknown";
         } else {
            var _p4 = _p3._0;
            switch (_p4)
            {case "76ers": return "76人";
               case "blazers": return "拓荒者";
               case "bucks": return "公鹿";
               case "bulls": return "公牛";
               case "cavaliers": return "騎士";
               case "celtics": return "塞爾提克";
               case "clippers": return "快艇";
               case "grizzlies": return "灰熊";
               case "hawks": return "老鷹";
               case "heat": return "熱火";
               case "hornets": return "黃蜂";
               case "jazz": return "爵士";
               case "kings": return "國王";
               case "knicks": return "尼克";
               case "lakers": return "湖人";
               case "magic": return "魔術";
               case "mavericks": return "小牛";
               case "nets": return "籃網";
               case "nuggets": return "金塊";
               case "pacers": return "溜馬";
               case "pelicans": return "鵜鶘";
               case "pistons": return "活塞";
               case "raptors": return "暴龍";
               case "rockets": return "火箭";
               case "spurs": return "馬刺";
               case "suns": return "太陽";
               case "thunder": return "雷霆";
               case "timberwolves": return "灰狼";
               case "warriors": return "勇士";
               case "wizards": return "巫師";
               default: return "不知道";}
         }
   };
   var translateSource = function (source) {
      var _p5 = source;
      switch (_p5)
      {case "twsport": return "台彩";
         case "bet365": return "國際";
         default: return "Unknown";}
   };
   var formatDate = function (orig) {
      var _p6 = $Date.fromString(orig);
      if (_p6.ctor === "Ok") {
            return $Maybe.Just(A2($Date$Format.format,"%Y/%m/%d %H:%M",_p6._0));
         } else {
            return A2($Debug.log,_p6._0,$Maybe.Nothing);
         }
   };
   var competitionInfo = function (row) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("competition-info")]),
      _U.list([A2($Html.span,_U.list([$Html$Attributes.$class("team-name")]),_U.list([$Html.text(translateTeamName(row.teamA))]))
              ,A2($Html.span,_U.list([$Html$Attributes.$class("vs")]),_U.list([$Html.text("v.s.")]))
              ,A2($Html.span,_U.list([$Html$Attributes.$class("team-name")]),_U.list([$Html.text(translateTeamName(row.teamB))]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("time")]),
              _U.list([$Html.text(function () {    var _p7 = formatDate(row.time);if (_p7.ctor === "Just") {    return _p7._0;} else {    return "";}}())]))]));
   };
   var totalRow = function (row) {
      var sort = $List.sortBy($Basics.fst);
      var mapper = F2(function (getter,odd) {
         var _p8 = odd;
         if (_p8.ctor === "Total") {
               var _p9 = _p8._0;
               return A2($Maybe.andThen,formatDate(_p9.createdAt),function (date) {    return $Maybe.Just({ctor: "_Tuple2",_0: date,_1: getter(_p9)});});
            } else {
               return $Maybe.Nothing;
            }
      });
      var showOdd = function (_p10) {
         var _p11 = _p10;
         var _p15 = _p11._1;
         var odd = $List.head($List.reverse(_p15));
         var _p12 = odd;
         if (_p12.ctor === "Just") {
               var _p13 = _p12._0;
               if (_p13.ctor === "Total") {
                     var _p14 = _p13._0;
                     return $Maybe.Just(A2($Html.div,
                     _U.list([$Html$Attributes.$class("stats")]),
                     _U.list([A2($Html.ul,
                     _U.list([]),
                     _U.list([A2($Html.li,_U.list([]),_U.list([$Html.text(translateSource(_p11._0)),A2($Html.span,_U.list([]),_U.list([$Html.text("盤")]))]))
                             ,A2($Html.li,
                             _U.list([]),
                             _U.list([A2(historyView,_p14.score,A2($List.filterMap,mapper(function (_) {    return _.score;}),_p15))
                                     ,A2($Html.span,_U.list([]),_U.list([$Html.text("總分")]))]))
                             ,A2($Html.li,
                             _U.list([]),
                             _U.list([A2(historyView,_p14.oddOver,A2($List.filterMap,mapper(function (_) {    return _.oddOver;}),_p15))
                                     ,A2($Html.span,_U.list([]),_U.list([$Html.text("大於")]))]))
                             ,A2($Html.li,
                             _U.list([]),
                             _U.list([A2(historyView,_p14.oddUnder,A2($List.filterMap,mapper(function (_) {    return _.oddOver;}),_p15))
                                     ,A2($Html.span,_U.list([]),_U.list([$Html.text("小於")]))]))]))])));
                  } else {
                     return $Maybe.Nothing;
                  }
            } else {
               return $Maybe.Nothing;
            }
      };
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("row")]),
      _U.list([competitionInfo(row),A2($Html.div,_U.list([$Html$Attributes.$class("odd")]),A2($List.filterMap,showOdd,$Dict.toList(row.odds)))]));
   };
   var spreadRow = function (row) {
      var showOdd = function (_p16) {
         var _p17 = _p16;
         var _p23 = _p17._1;
         var mapper = F2(function (getter,odd) {
            var _p18 = odd;
            if (_p18.ctor === "Spread") {
                  var _p19 = _p18._0;
                  return A2($Maybe.andThen,formatDate(_p19.createdAt),function (date) {    return $Maybe.Just({ctor: "_Tuple2",_0: date,_1: getter(_p19)});});
               } else {
                  return $Maybe.Nothing;
               }
         });
         var getter = F3(function (getter1,getter2,oddRecord) {
            return A2($Basics._op["++"],getter1(oddRecord),A2($Basics._op["++"],"/",getter2(oddRecord)));
         });
         var latest = $List.head($List.reverse(_p23));
         var _p20 = latest;
         if (_p20.ctor === "Just") {
               var _p21 = _p20._0;
               if (_p21.ctor === "Spread") {
                     var _p22 = _p21._0;
                     return $Maybe.Just(A2($Html.div,
                     _U.list([$Html$Attributes.$class("stats")]),
                     _U.list([A2($Html.ul,
                     _U.list([]),
                     _U.list([A2($Html.li,_U.list([]),_U.list([$Html.text(translateSource(_p17._0)),A2($Html.span,_U.list([]),_U.list([$Html.text("盤")]))]))
                             ,A2($Html.li,
                             _U.list([]),
                             _U.list([A2(historyView,
                                     A3(getter,function (_) {    return _.scoreA;},function (_) {    return _.scoreB;},_p22),
                                     A2($List.filterMap,mapper(A2(getter,function (_) {    return _.scoreA;},function (_) {    return _.scoreB;})),_p23))
                                     ,A2($Html.span,_U.list([]),_U.list([$Html.text("讓分")]))]))
                             ,A2($Html.li,
                             _U.list([]),
                             _U.list([A2(historyView,
                                     A3(getter,function (_) {    return _.oddA;},function (_) {    return _.oddB;},_p22),
                                     A2($List.filterMap,mapper(A2(getter,function (_) {    return _.oddA;},function (_) {    return _.oddB;})),_p23))
                                     ,A2($Html.span,_U.list([]),_U.list([$Html.text("賠率")]))]))]))])));
                  } else {
                     return $Maybe.Nothing;
                  }
            } else {
               return $Maybe.Nothing;
            }
      };
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("row")]),
      _U.list([competitionInfo(row),A2($Html.div,_U.list([$Html$Attributes.$class("odd")]),A2($List.filterMap,showOdd,$Dict.toList(row.odds)))]));
   };
   var moneyLineRow = function (row) {
      var showOdd = function (_p24) {
         var _p25 = _p24;
         var _p30 = _p25._1;
         var mapper = F2(function (getter,odd) {
            var _p26 = odd;
            if (_p26.ctor === "MoneyLine") {
                  var _p27 = _p26._0;
                  return A2($Maybe.andThen,formatDate(_p27.createdAt),function (date) {    return $Maybe.Just({ctor: "_Tuple2",_0: date,_1: getter(_p27)});});
               } else {
                  return $Maybe.Nothing;
               }
         });
         var getter = F3(function (getter1,getter2,oddRecord) {
            return A2($Basics._op["++"],getter1(oddRecord),A2($Basics._op["++"],"/",getter2(oddRecord)));
         });
         var latest = $List.head($List.reverse(_p30));
         var _p28 = latest;
         if (_p28.ctor === "Just") {
               var _p29 = _p28._0;
               if (_p29.ctor === "MoneyLine") {
                     return $Maybe.Just(A2($Html.div,
                     _U.list([$Html$Attributes.$class("stats")]),
                     _U.list([A2($Html.ul,
                     _U.list([]),
                     _U.list([A2($Html.li,_U.list([]),_U.list([$Html.text(translateSource(_p25._0)),A2($Html.span,_U.list([]),_U.list([$Html.text("盤")]))]))
                             ,A2($Html.li,
                             _U.list([]),
                             _U.list([A2(historyView,
                                     A3(getter,function (_) {    return _.oddA;},function (_) {    return _.oddB;},_p29._0),
                                     A2($List.filterMap,mapper(A2(getter,function (_) {    return _.oddA;},function (_) {    return _.oddB;})),_p30))
                                     ,A2($Html.span,_U.list([]),_U.list([$Html.text("賠率")]))]))]))])));
                  } else {
                     return $Maybe.Nothing;
                  }
            } else {
               return $Maybe.Nothing;
            }
      };
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("row")]),
      _U.list([competitionInfo(row),A2($Html.div,_U.list([$Html$Attributes.$class("odd")]),A2($List.filterMap,showOdd,$Dict.toList(row.odds)))]));
   };
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("container")]),
      _U.list([A2($Html.div,
              _U.list([$Html$Attributes.$class("type")]),
              A2($List._op["::"],A2($Html.h3,_U.list([]),_U.list([$Html.text("大小分")])),A2($List.map,totalRow,$Dict.values(model.total))))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("type")]),
              A2($List._op["::"],A2($Html.h3,_U.list([]),_U.list([$Html.text("讓分")])),A2($List.map,spreadRow,$Dict.values(model.spread))))
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("type")]),
              A2($List._op["::"],A2($Html.h3,_U.list([]),_U.list([$Html.text("不讓分")])),A2($List.map,moneyLineRow,$Dict.values(model.moneyLine))))]));
   });
   var initialModel = {total: $Dict.empty,spread: $Dict.empty,moneyLine: $Dict.empty};
   var addBet = F2(function (bet,model) {
      var updateRow = function (dict) {
         var _p31 = A2($Dict.get,bet.competitionToken,dict);
         if (_p31.ctor === "Just") {
               var _p33 = _p31._0;
               var oldOdds = A2($Dict.get,bet.source,_p33.odds);
               var _p32 = oldOdds;
               if (_p32.ctor === "Just") {
                     return _U.update(_p33,{odds: A3($Dict.insert,bet.source,A2($Basics._op["++"],_p32._0,_U.list([bet.odd])),_p33.odds)});
                  } else {
                     return _U.update(_p33,{odds: A3($Dict.insert,bet.source,_U.list([bet.odd]),_p33.odds)});
                  }
            } else {
               return {teamA: bet.teamA
                      ,teamB: bet.teamB
                      ,time: bet.time
                      ,league: bet.league
                      ,region: bet.region
                      ,sport: bet.sport
                      ,odds: A2($Dict.singleton,bet.source,_U.list([bet.odd]))
                      ,competitionToken: bet.competitionToken};
            }
      };
      var _p34 = bet.oddType;
      switch (_p34)
      {case "total": return _U.update(model,{total: A3($Dict.insert,bet.competitionToken,updateRow(model.total),model.total)});
         case "spread": return _U.update(model,{spread: A3($Dict.insert,bet.competitionToken,updateRow(model.spread),model.spread)});
         case "money_line": return _U.update(model,{moneyLine: A3($Dict.insert,bet.competitionToken,updateRow(model.moneyLine),model.moneyLine)});
         default: return model;}
   });
   var update = F2(function (action,model) {    var _p35 = action;if (_p35.ctor === "NoOp") {    return model;} else {    return A2(addBet,_p35._0,model);}});
   var Competition = F8(function (a,b,c,d,e,f,g,h) {    return {competitionToken: a,teamA: b,teamB: c,time: d,league: e,region: f,sport: g,odds: h};});
   var Model = F3(function (a,b,c) {    return {total: a,spread: b,moneyLine: c};});
   var Unknown = {ctor: "Unknown"};
   var emptyBet = {teamA: "",teamB: "",oddType: "",time: "",league: "",region: "",sport: "",source: "",competitionToken: "",createdAt: "",odd: Unknown};
   var MoneyLine = function (a) {    return {ctor: "MoneyLine",_0: a};};
   var Spread = function (a) {    return {ctor: "Spread",_0: a};};
   var Total = function (a) {    return {ctor: "Total",_0: a};};
   var MoneyLineOdd = F3(function (a,b,c) {    return {oddA: a,oddB: b,createdAt: c};});
   var SpreadOdd = F5(function (a,b,c,d,e) {    return {scoreA: a,scoreB: b,oddA: c,oddB: d,createdAt: e};});
   var TotalOdd = F4(function (a,b,c,d) {    return {score: a,oddUnder: b,oddOver: c,createdAt: d};});
   var oddDecoder = F2(function (oddType,date) {
      var _p36 = oddType;
      switch (_p36)
      {case "total": return A2($Json$Decode.map,
           Total,
           A5($Json$Decode.object4,
           TotalOdd,
           A2($Json$Decode._op[":="],"score",$Json$Decode.string),
           A2($Json$Decode._op[":="],"odd_under",$Json$Decode.string),
           A2($Json$Decode._op[":="],"odd_over",$Json$Decode.string),
           $Json$Decode.succeed(date)));
         case "spread": return A2($Json$Decode.map,
           Spread,
           A6($Json$Decode.object5,
           SpreadOdd,
           A2($Json$Decode._op[":="],"score_a",$Json$Decode.string),
           A2($Json$Decode._op[":="],"score_b",$Json$Decode.string),
           A2($Json$Decode._op[":="],"odd_a",$Json$Decode.string),
           A2($Json$Decode._op[":="],"odd_b",$Json$Decode.string),
           $Json$Decode.succeed(date)));
         case "money_line": return A2($Json$Decode.map,
           MoneyLine,
           A4($Json$Decode.object3,
           MoneyLineOdd,
           A2($Json$Decode._op[":="],"odd_a",$Json$Decode.string),
           A2($Json$Decode._op[":="],"odd_b",$Json$Decode.string),
           $Json$Decode.succeed(date)));
         default: return $Json$Decode.fail("Unknow odd type");}
   });
   var Bet = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return function (k) {
                                    return {oddType: a
                                           ,teamA: b
                                           ,teamB: c
                                           ,time: d
                                           ,league: e
                                           ,region: f
                                           ,sport: g
                                           ,source: h
                                           ,competitionToken: i
                                           ,createdAt: j
                                           ,odd: k};
                                 };
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   var betDecoder = A2($Json$Decode.andThen,
   A2($Json$Decode._op[":="],"odd_type",$Json$Decode.string),
   function (s) {
      return A2($Json$Decode.andThen,
      A2($Json$Decode.at,_U.list(["meta","created_at"]),$Json$Decode.string),
      function (date) {
         return A2(apply,
         A2(apply,
         A2(apply,
         A2(apply,
         A2(apply,
         A2(apply,
         A2(apply,
         A2(apply,
         A2(apply,
         A2(apply,
         A2(apply,constructing(Bet),A2($Json$Decode._op[":="],"odd_type",$Json$Decode.string)),
         A2($Json$Decode._op[":="],"team_a",$Json$Decode.string)),
         A2($Json$Decode._op[":="],"team_b",$Json$Decode.string)),
         A2($Json$Decode._op[":="],"time",$Json$Decode.string)),
         A2($Json$Decode._op[":="],"league",$Json$Decode.string)),
         A2($Json$Decode._op[":="],"region",$Json$Decode.string)),
         A2($Json$Decode._op[":="],"sport",$Json$Decode.string)),
         A2($Json$Decode._op[":="],"source",$Json$Decode.string)),
         A2($Json$Decode._op[":="],"competition_token",$Json$Decode.string)),
         A2($Json$Decode.at,_U.list(["meta","created_at"]),$Json$Decode.string)),
         A2($Json$Decode._op[":="],"odd",A2(oddDecoder,s,date)));
      });
   });
   var bets = A2($Signal.map,
   Update,
   A3($Signal.filterMap,function (_p37) {    return $Result.toMaybe(log(A2($Json$Decode.decodeString,betDecoder,_p37)));},emptyBet,rawBets.signal));
   var model = A3($Signal.foldp,update,initialModel,bets);
   var main = A2($Signal.map,view(actions.address),model);
   return _elm.Main.values = {_op: _op
                             ,Bet: Bet
                             ,TotalOdd: TotalOdd
                             ,SpreadOdd: SpreadOdd
                             ,MoneyLineOdd: MoneyLineOdd
                             ,Total: Total
                             ,Spread: Spread
                             ,MoneyLine: MoneyLine
                             ,Unknown: Unknown
                             ,Model: Model
                             ,Competition: Competition
                             ,addBet: addBet
                             ,initialModel: initialModel
                             ,emptyBet: emptyBet
                             ,formatDate: formatDate
                             ,translateSource: translateSource
                             ,translateTeamName: translateTeamName
                             ,historyView: historyView
                             ,totalRow: totalRow
                             ,spreadRow: spreadRow
                             ,moneyLineRow: moneyLineRow
                             ,competitionInfo: competitionInfo
                             ,view: view
                             ,NoOp: NoOp
                             ,Update: Update
                             ,update: update
                             ,actions: actions
                             ,constructing: constructing
                             ,apply: apply
                             ,socket: socket
                             ,rawBets: rawBets
                             ,oddDecoder: oddDecoder
                             ,betDecoder: betDecoder
                             ,log: log
                             ,bets: bets
                             ,model: model
                             ,main: main};
};