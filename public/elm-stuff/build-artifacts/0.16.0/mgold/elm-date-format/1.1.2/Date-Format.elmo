Elm.Date = Elm.Date || {};
Elm.Date.Format = Elm.Date.Format || {};
Elm.Date.Format.make = function (_elm) {
   "use strict";
   _elm.Date = _elm.Date || {};
   _elm.Date.Format = _elm.Date.Format || {};
   if (_elm.Date.Format.values) return _elm.Date.Format.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Regex = Elm.Regex.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var padWith = function (c) {    return function (_p0) {    return A3($String.padLeft,2,c,$Basics.toString(_p0));};};
   var zero2twelve = function (n) {    return _U.eq(n,0) ? 12 : n;};
   var mod12 = function (h) {    return A2($Basics._op["%"],h,12);};
   var fullDayOfWeek = function (dow) {
      var _p1 = dow;
      switch (_p1.ctor)
      {case "Mon": return "Monday";
         case "Tue": return "Tuesday";
         case "Wed": return "Wednesday";
         case "Thu": return "Thursday";
         case "Fri": return "Friday";
         case "Sat": return "Saturday";
         default: return "Sunday";}
   };
   var monthToFullName = function (m) {
      var _p2 = m;
      switch (_p2.ctor)
      {case "Jan": return "January";
         case "Feb": return "February";
         case "Mar": return "March";
         case "Apr": return "April";
         case "May": return "May";
         case "Jun": return "June";
         case "Jul": return "July";
         case "Aug": return "August";
         case "Sep": return "September";
         case "Oct": return "October";
         case "Nov": return "November";
         default: return "December";}
   };
   var monthToInt = function (m) {
      var _p3 = m;
      switch (_p3.ctor)
      {case "Jan": return 1;
         case "Feb": return 2;
         case "Mar": return 3;
         case "Apr": return 4;
         case "May": return 5;
         case "Jun": return 6;
         case "Jul": return 7;
         case "Aug": return 8;
         case "Sep": return 9;
         case "Oct": return 10;
         case "Nov": return 11;
         default: return 12;}
   };
   var collapse = function (m) {    return A2($Maybe.andThen,m,$Basics.identity);};
   var formatToken = F2(function (d,m) {
      var symbol = A2($Maybe.withDefault," ",collapse(A2($Maybe.andThen,$List.tail(m.submatches),$List.head)));
      var prefix = A2($Maybe.withDefault," ",collapse($List.head(m.submatches)));
      return A2($Basics._op["++"],
      prefix,
      function () {
         var _p4 = symbol;
         switch (_p4)
         {case "Y": return $Basics.toString($Date.year(d));
            case "m": return A3($String.padLeft,2,_U.chr("0"),$Basics.toString(monthToInt($Date.month(d))));
            case "B": return monthToFullName($Date.month(d));
            case "b": return $Basics.toString($Date.month(d));
            case "d": return A2(padWith,_U.chr("0"),$Date.day(d));
            case "e": return A2(padWith,_U.chr(" "),$Date.day(d));
            case "a": return $Basics.toString($Date.dayOfWeek(d));
            case "A": return fullDayOfWeek($Date.dayOfWeek(d));
            case "H": return A2(padWith,_U.chr("0"),$Date.hour(d));
            case "k": return A2(padWith,_U.chr(" "),$Date.hour(d));
            case "I": return A2(padWith,_U.chr("0"),zero2twelve(mod12($Date.hour(d))));
            case "l": return A2(padWith,_U.chr(" "),zero2twelve(mod12($Date.hour(d))));
            case "p": return _U.cmp($Date.hour(d),13) < 0 ? "AM" : "PM";
            case "P": return _U.cmp($Date.hour(d),13) < 0 ? "am" : "pm";
            case "M": return A2(padWith,_U.chr("0"),$Date.minute(d));
            case "S": return A2(padWith,_U.chr("0"),$Date.second(d));
            default: return "";}
      }());
   });
   var re = $Regex.regex("(^|[^%])%(Y|m|B|b|d|e|a|A|H|k|I|l|p|P|M|S)");
   var format = F2(function (s,d) {    return A4($Regex.replace,$Regex.All,re,formatToken(d),s);});
   var formatISO8601 = format("%Y-%m-%dT%H:%M:%SZ");
   return _elm.Date.Format.values = {_op: _op,format: format,formatISO8601: formatISO8601};
};